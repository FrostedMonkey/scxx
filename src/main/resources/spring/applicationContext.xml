<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- 保证实现了Shiro内部lifecycle（回调）函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 配置自定义 realm -->
    <bean id="saftyRealm" class="com.yizu.scgcxx.shiro.SaftyRealm"/>

    <!-- 配置自定义securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="saftyRealm"/>
        <property name="sessionMode" value="native"/><!-- 配置使用Shiro本地Session，该Session会与HttpSession数据同步 -->
    </bean>

    <!-- 配置自定义的生成filterChainDefinitionMap的工厂bean -->
    <bean id="filterChainDefinitionMap" class="com.yizu.scgcxx.shiro.ShiroDefinitionSectionFactory">
        <property name="preFilterChainDefinitions">
            <value>
                /static/** = anon
                /safty/login_to = anon
                /safty/login_do = anon
            </value>
        </property>
        <property name="postFilterChainDefinitions">
            <value>
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 配置Shiro过滤器，该过滤器名称应当与web.xml配置的代理过滤器名称一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <property name="securityManager" ref="securityManager"/><!-- 必须设置 -->

        <!-- 3 个 url 属性为可选设置 -->
        <property name="loginUrl" value="/safty/login_to"/> <!-- 登录界面url -->
        <property name="successUrl" value="/safty/home_to"/> <!-- 登录成功后界面url -->
        <property name="unauthorizedUrl" value="/safty/unauthorized_to"/> <!-- 未授权界面url -->


        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>

    </bean>

    <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties"/>

    <context:component-scan base-package="com.yizu.scgcxx.config.redis"/>


    <!-- 配置 JedisPoolConfig 实例 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- 配置JedisConnectionFactory -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <!-- <property name="password" value="${redis.pass}"/> -->
        <property name="database" value="${redis.dbIndex}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"/> -->

    <!-- 配置RedisTemplate -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>


    <!-- **********		数据源配置		********** -->
    <!-- 1. 配置读取jdbc.properties文件 -->

    <!-- 2. 配置druid连接池 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>


    <!-- ************		业务注册		************ -->
    <!-- Service的注册 业务逻辑注册 -->
    <!-- 配置扫描器 -->
    <context:component-scan base-package="com.yizu.scgcxx.service"/>


    <!-- **********		整合Mybatis		********** -->
    <!-- 1. 注册SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis主配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 连接池注入 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mapper文件的位置 -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>

    <!-- 2. 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描所有的DAO接口 加入到IOC容器中 -->
        <property name="basePackage" value="com.yizu.scgcxx.dao"/>
    </bean>


    <!-- **********		事务配置		********** -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事务通知：配置事务策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务切面：配置事务应用的地方,注意应当将切入点定义的业务接口上 -->
    <aop:config>
        <aop:pointcut id="serviceOpr" expression="execution(* com.yizu.scgcxx.service.*.*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOpr"/>
    </aop:config>
</beans>